{"mode":"Text","hardwareTarget":"brain","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\n# Make random actually random\ndef initializeRandomSeed():\n    wait(100, MSEC)\n    random = brain.battery.voltage(MV) + brain.battery.current(CurrentUnits.AMP) * 100 + brain.timer.system_high_res()\n    urandom.seed(int(random))\n      \n# Set random seed \ninitializeRandomSeed()\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n#endregion VEXcode Generated Robot Configuration\nfrom vex import *\n\n\nclass RBEDrivetrain:\n    \"\"\"drivetrain class for RBE 1001, will build on the entire class\"\"\"\n\n    def __init__(\n        self,\n        LeftMotor: Motor,\n        RightMotor: Motor,\n        GearRatio: float = 1,\n        wheelDiameter: float = 1,\n        TrackWidth: float = 1,\n        Wheelbase: float = 1,\n    ):\n\n        self.LeftMotor = LeftMotor\n        self.RightMotor = RightMotor\n\n        self.gearRatio = GearRatio\n        \"\"\"the gear ratio on the drive motor\"\"\"\n\n        self.wheelDiameter = wheelDiameter\n        \"\"\"the radius of the drive wheels\"\"\"\n\n        self.wheelCircumference = wheelDiameter * 3.141592\n        \"\"\"how for the robot will move with 1 rotation\"\"\"\n\n        self.trackWidth = TrackWidth\n        \"\"\"distance from left Wheel to right wheel\"\"\"\n\n        self.wheelbase = Wheelbase\n        \"\"\"distance from front to back wheel\"\"\"\n\n        self.rotationsPerInch = 1 / self.wheelCircumference\n        \"\"\"how Rotations will move the robot 1 inch\"\"\"\n\n    def driveStraight(self, Inches: float):\n        \"\"\"Function to drive BaseBot straight for some number of inches\"\"\"\n        Velocity = 100\n        self.LeftMotor.spin_for(\n            FORWARD,\n            Inches * self.gearRatio * self.rotationsPerInch,\n            RotationUnits.REV,\n            Velocity,\n            RPM,\n            False,\n        )\n        self.RightMotor.spin_for(\n            FORWARD,\n            Inches * self.gearRatio * self.rotationsPerInch,\n            RotationUnits.REV,\n            Velocity,\n            RPM,\n            True,\n        )\n\n    def turnInPlace(self, Rotations: float):\n        \"\"\"Function to turn BaseBot for some number of Rotations\"\"\"\n        Velocity = 100\n        self.LeftMotor.spin_for(\n            REVERSE,\n            Rotations * self.gearRatio * self.trackWidth / self.wheelDiameter,\n            RotationUnits.REV,\n            Velocity,\n            RPM,\n            False,\n        )\n        self.RightMotor.spin_for(\n            FORWARD,\n            Rotations * self.gearRatio * self.trackWidth / self.wheelDiameter,\n            RotationUnits.REV,\n            Velocity,\n            RPM,\n            True,\n        ) \n    def turnAroundWheel(self, Rotations: float):\n        Velocity = 100\n        if (Rotations > 0):\n            self.LeftMotor.spin_for(\n                FORWARD,\n                Rotations * self.gearRatio * self.trackWidth / self.wheelDiameter * 2,\n                RotationUnits.REV,\n                Velocity,\n                RPM,\n                True,\n            )\n        else:\n            self.RightMotor.spin_for(\n                REVERSE,\n                Rotations * self.gearRatio * self.trackWidth / self.wheelDiameter * 2,\n                RotationUnits.REV,\n                Velocity,\n                RPM,\n                True,\n            )\n# initialize the brian\nbrain = Brain()\n\n# initialize the left and right motor\nleft_motor = Motor(Ports.PORT1, 18_1, False)\nright_motor = Motor(Ports.PORT10, 18_1, True)\n\nbrain.screen.print(\"Hello, World\")\n\ndrivetrain = RBEDrivetrain(left_motor, right_motor, 5, 4, 11.0)\n\n\ndef polygon(sides: int, inches: float):\n    for _ in range(sides):\n        drivetrain.driveStraight(inches)\n        drivetrain.turnInPlace(1 / sides)\n\n\ndef maze():\n    # forward\n    # turn left\n    # forward\n    # forward\n    # turn right\n    # forward\n    # turn right\n    # forward\n    drivetrain.driveStraight(20)\n    drivetrain.turnAroundWheel(1 / 4)\n    drivetrain.driveStraight(16.5)\n    drivetrain.turnAroundWheel(-1 / 4)\n    drivetrain.driveStraight(9)\n    drivetrain.turnAroundWheel(-1 / 4)\n    drivetrain.driveStraight(5.5)\npolygon()","textLanguage":"python","robotConfig":[],"slot":0,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.7","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false}